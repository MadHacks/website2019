{"version":3,"sources":["img/logo.png","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","carbon","color","lineHeight","applyButton","borderColor","padding","fontSize","marginTop","Header","classes","react_default","a","createElement","className","src","logo","alt","Typography","variant","component","gutterBottom","Button","href","theme","createMuiTheme","typography","fontFamily","App","Container","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mRCOlCC,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,MAAO,UACPC,WAAW,OAEbC,YAAa,CACXF,MAAO,UACPG,YAAa,UACbC,QAAS,WACTC,SAAU,SACVC,UAAW,UAIA,SAASC,IACtB,IAAMC,EAAUX,IAGhB,OACEY,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,GAChDV,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAACP,UAAWJ,EAAQT,QACpEU,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKE,cAAY,GAArC,wCAGAV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKE,cAAY,GAArC,uBAGAV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQH,QAAQ,WAAWI,KAjBZ,+CAiBgCT,UAAWJ,EAAQN,aAAlE,UC/BR,IAAMoB,EAAQC,YAAe,CAC3BC,WAAY,CACVC,WAAY,wBAgBDC,MAZf,WACE,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAeN,MAAOA,GACpBb,EAAAC,EAAAC,cAACJ,EAAD,UCRUsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b91ccd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b5a67670.png\";","import React from 'react';\nimport logo from '../img/logo.png';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport 'typeface-roboto-condensed';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  carbon: {\n    color: '#4DBF00',\n    lineHeight:'0.2'\n  },\n  applyButton: {\n    color: '#FFFFFF',\n    borderColor: '#FFFFFF',\n    padding: '8px 24px',\n    fontSize: '1.5rem',\n    marginTop: '10px',\n  }\n});\n\nexport default function Header() {\n  const classes = useStyles();\n  const typeformLink = \"https://madhacks-2018.typeform.com/to/sSeSiB\";\n\n  return (\n    <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n            <b>MadHacks</b>\n        </Typography>\n        <Typography variant=\"h1\" component=\"h2\" gutterBottom className={classes.carbon}>\n            <b>Carbon</b>\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom>\n            University of Wisconsinâ€“Madison\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom>\n            October 19-20, 2019\n        </Typography>\n        <Button variant=\"outlined\" href={typeformLink} className={classes.applyButton}>\n            Apply\n        </Button>\n    </header>\n  );\n}","import React from 'react';\nimport './App.css';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport 'typeface-roboto-condensed';\nimport Container from '@material-ui/core/Container';\n\nimport Header from './components/Header';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: '\"Roboto Condensed\"'\n  },\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <ThemeProvider theme={theme}>\n          <Header />\n        </ThemeProvider>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}